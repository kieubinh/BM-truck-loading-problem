import pandas as pd

truck_df = pd.read_csv('data/trucks.csv', header=0)
item_df = pd.read_csv('data/items.csv', header=0)
input_df = pd.read_csv('data/input.csv', header=0)

## check data

# print(truck_df)
# print(item_df)
# print(input_df)

# input_df.join(item_df)
input_df = input_df.merge(item_df, on='Product_Code')
# print(input_df)

## Sort items by width desc, length desc, weight desc
input_df = input_df.sort_values(by=['Width', 'Length', 'Weight'], ascending=[False, False, False])
print(input_df)

## Allocate at most 3 levels of truck, if full add one truck with priority Matt, Van, Dan and Ken
arrange_trucks = tuple(tuple(tuple(tuple([0 for _ in range(48)] for _ in range(50)) for _ in range(186)) for _ in range(3)) for _ in range(20))
num_trucks = 1

for index, row in input_df.iterrows():
    # print(row['Product_Code'], row['Width'], row['Length'], row['Weight'])
    pass

# Sort truck_df by Cost in ascending order
truck_df = truck_df.sort_values(by='Cost')

# Initialize an empty list to hold the trucks in use
trucks_in_use = []

# For each item in input_df

## optimize total_cost
total_cost = 0

## Generated by Copilot

# Sort truck_df by Cost in ascending order
truck_df = truck_df.sort_values(by='Cost')

# Initialize an empty list to hold the trucks in use
trucks_in_use = []

# Sort input_df by volume in descending order
input_df['Volume'] = input_df['Length'] * input_df['Width'] * input_df['Weight']
input_df = input_df.sort_values(by='Volume', ascending=False)

# For each item in input_df
for _, item in input_df.iterrows():
    print(item)
    for _ in range(item['Quantity']):        
        # Try to place the item in an existing truck
        for truck in trucks_in_use:
            if (truck['remaining_length'] >= item['Length'] and
                truck['remaining_width'] >= item['Width'] and
                truck['remaining_weight'] >= item['Weight']):
                truck['remaining_length'] -= item['Length']
                truck['remaining_width'] -= item['Width']
                truck['remaining_weight'] -= item['Weight']
                break
        else:
            # If the item couldn't be placed in an existing truck, add a new truck
            for _, truck in truck_df.iterrows():
                if (truck['Length'] >= item['Length'] and
                    truck['Width'] >= item['Width'] and
                    truck['Weight'] >= item['Weight']):
                    truck['remaining_length'] = truck['Length'] - item['Length']
                    truck['remaining_width'] = truck['Width'] - item['Width']
                    truck['remaining_weight'] = truck['Weight'] - item['Weight']
                    trucks_in_use.append(truck)
                    total_cost += truck['Cost']
                    break

print(total_cost)